CLASS - 1
-----------------------
STEPS to create a test:
       1. Create a feature and Write Steps in "features" using tags
       2. in Runner Class write:
                            dryRun = true,
                            tags = "@tagName"
       3. Create steps in "steps" directory to write a code for a new steps
       4.
-----------------------
Cucumber - is a tool:
Gherkin - is a language
     BDD - behavioral-driven development

Group ID (When creating a new Project):
          Example: org.amazon ( organization name)
Artifact ID:
          Example: aws ( name of the project)
src (source):
   main -
   test -

   delete main folder because we don't need it

   in test we have:
                1. java - for technical stuff
                2. resources - for non-technical stuff

We added 6 dependencies:
  NOW WE HAVE: java, selenium,  cucumber, apache, common io
  -----------------------------------------------------------
  Scenario BDD
              - The file where we write BDD scenarios, we call it feature file
Steps:
     1. we create "features" directory inside "resources" directory (non-java packages called "directory")
     ---> 2. create file called "Login.feature"
     - in one User Story - we have multiple test cases
                           similarly, in one feature file, we write multiple scenarios for that user story
------------------
  TASK:
   Add Employee
      RULES of Steps: Dont add any space or any char after implementing step definition
                      don write duplicate step def, just one step definition should exist you can call
                      steps in feature multiple times, but in back-end there should be only one step definition


we have scenarios written in feature file
we have step definitions in steps classes

all test scenarios are executing properly

we are calling methods from common methods class
we are using selenium webDriver from common methods class

runner class - it is considered as the most important class of cucumber

3 important classes in
     feature file
     step definition

     runner class:
                 we can execute all of the scenarios, some of the scenarios, one of the scenarios from this class
                 we can generate all the step definitions in just one click
                 we can generate reports also from this class
                 we can separate scenarios also from this class

--------------------------------------------------------------------------------------------
CLASS-2
----------------------------------------------
RECAP:
    Cucumber:
             1. "feature" file in which we write all the scenarios
             2. "Step Definition Class", where all the step definitions are available
             3. "Runner Class" - all the test cases we execute from Runner Class:
                           glue="steps" - here in glue, we provide the name of the steps package. Runner class will search all the step definitions inside this package
                           dryRun=false(or true) - when we set the value of dryRun = true:
                                                 - it stops the actual execution and scans all the step definitions
                                                 - if the step def is missing in any of the class, then it will give you that  missing step def.
                                                 - if all the step def are there, it will provide green tick
                                                 - set the value of dryRun=false - to start the actual execution after implementing the missing step
    maven project:
         artifact ID - project name
         group ID - company name

    main - development:
    test - to test the application
    test --> java and resources - for all technical part we need "java" and for all non-tech part we need "resources"

Class-2:
    "features" --> Background
              "Background" -  allows us to write all duplicate steps in one feature file till the time flow is not broken at one place
                   - Once the flow is broken, we cannot write steps in background
                   - One background is applicable for one feature file it means for every feature file background will be different

              Grouping Scenarios:
                   TAGS:
                        = if we need to execute specific scenarios, we use tag name here
                        - We can add multiple tags to one scenario (in RunnerClass, over Scenario)
                               Ex:  @smoke
                                    Scenario ...
                                       Given ...
                        - we can give any name to the tag like: test type, name, sprint number etc.
                               Ex: @regression @sprint3 @sabina
                               Ex-2: tags = "@karina or @sabina"
                                     tags = "@karina and @sabina"
Hooks:
    - in cucumber, hooks we use to mention pre-condition and post condition of the complete project.
    - It means for all the feature files, we have common pre-condition and post condition such as opening the browser and closing the browser
        RULE: Hooks class will be implemented under steps package

Background vs hooks:
             HOOKS
                   - hooks are applicable for complete project (all feature files)
                   - in Hooks we keep only pre-conditions and post conditions of the entire project
             BACKGROUND
                   - background is applicable only for one feature file
                   - in background we keep all the common steps for one feature file

Data driven testing:
             - when your one test case executes against multiple sets of data
--------------------------------------------------------------------------------------------
CLASS - 3
-------------------------------------
 - Page Object Model Design Pattern:
          STEPS:
               1. Create "pages" package
               2. Create a class
               3. Create an Object:
                      Example:
                             @FindBy(id="firstName")
                             public WebElement firstNameLoc;
                             public LoginPage(){
                                     PageFactory.initElements(driver, this);
                                 }
                       Notes:
                             - find by class will be used to identify the webElement using id here
                             - firstNameLoc is the key which we will call in scripts
                             - object repository is nothing but the locators you keep in page class
                             - PageFactory - Selenium


               4. Create a "PageInitializer" class in "utils"
                                 6. 4. Create an Object of the Common Locators
                                                   Example:
                                                            public static AddEmployeePage addEmployeePage;

                                                            public static void initializePageObjects(){
                                                              addEmployeePage = new AddEmployeePage();
                                                            }

               5. in  Steps, we can use this Object instead of creating many common locators:
                            Ex:
                               //WebElement firstNameLoc = driver.findElement(By.id("firstName"));
                               //WebElement middleNameLoc = driver.findElement(By.id("middleName"));
                               //WebElement lastNameLoc = driver.findElement(By.id("lastName"));
                                 AddEmployeePage addEmployeePage = new AddEmployeePage();

                                 sendText("gibril", addEmployeePage.firstNameLoc);
                                 sendText("MS", addEmployeePage.middleNameLoc);
                                 sendText("Hassan", addEmployeePage.lastNameLoc);


               6. In CommonMethods: 1. Extend CommonMethods to PageInitializer
                                    2. Call method-     initializePageObjects();
                                       right after launching the Browser
                                     Example:
                                           driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
                                                   driver.manage().window().maximize();
                                                   driver.get(ConfigReader.read("url"));
                                                   initializePageObjects();
               8. After adding the initializePageObjects(); in CommonMethods
                     we can remove all objects from Steps, bcz everything is centralized



----------------------------------------------
Recap:
     Background is:
            - in one feature file, if we have some steps which are common across all the scenarios
              then we can write them in background but only till the point where flow is not broken.
            - background is applicable only for one feature file, for every feature file, background
              will be different

     hooks:
            - before and after - pre-condition and post condition
            - hooks class will always be under steps package

     tags:
            - in order to execute scenarios/test cases in group, we use tags

     Data we write in the test:
            - hard coded data - it is strictly prohibited
            - data should be parameterized - scripts should be generic

     feature file:
            - from feature file, we can pass the data in scenario itself.
            - this type of scenario will be applicable to implement for just one data set

     scripts:
            - should be generic, it should be data driven testing
                       Example:
                            @cucumber
                              Scenario: Adding employee from feature file
                                When user enters "Sheila" , "MS" and "Bangal"
     driven testing:
            - when one script executes against multiple sets of data, then we call it data driven testing
            - in order to implement DDT in cucumber, we use scenario outline with examples table
                       Example:
                            @ddt
                              Scenario Outline: : Adding employees using data driven testing
                                When user enters "<firstName>" and "<middleName>" and "<lastName>".
                                And user clicks on save button
                                Then employee added successfully
                                Examples:
                                  | firstName | middleName | lastName |
                                  |Fouad      |MS          |Oliinyk   |
                                  |Matt       |MS          |Aslloun   |
                                  |Lali       |MS          |Shahad    |

     Page object model design pattern:
                         - we create object repository of every page in individual class
                         - We need it in case developer makes change, we don't need to change all scenarios codes
--------------------------------------------------------------------------------------------
Review class -
----------------------------------
Cucumber - as a tool
              BDD approach - behavioral driven development approach:
                                        given - pre-condition
                                        when - to perform actions (click, send keys, drag and drop, dropdown etc)
                                        then - expected result
                                        and -  supporting tag that can be used with given, when, then

              maven project:
                          - build tool - it makes my project as a single build

              configuration file - pom.xml (dependencies, plugins, run the code)

              Scenario:
                          - we wrote scenarios in project
                          - every single test case will be considered as one scenario
                          - we use feature file to write scenarios -

1. feature file
2. step definition class
3. runner class

            - hooks - pro condition and post condition -
            - user story - Employee search

   Background:
     Given user is navigated to HRMS application
      When user enters valid username and password
      And user clicks on login button
      Then user is successfully logged in
      When user clicks on PIM option
      And user clicks on employee list option

     Scenario - search employee by id
       When user enters valid employee id
       And user clicks on search button
       Then user see the employee information


     Scenario - search employee by name
       When user enters valid employee name
       And user clicks on search button
       Then user see the employee information

    Hooks:
         - in hooks, we implement pre-condition and post condition

    pre-condition:
         - opening the browser and launching the application
    post-condition - close the browser

Rule - hooks will be implemented in steps package

@Before - is pre-condition
@After - is post-condition

difference in between hooks and background

background is applicable for one feature file
hooks are applicable for entire project

we dont pass hard coded data in framework
cucumber allows me to pass data from feature file

my script should run against multiple sets of data
in order to achieve data driven testing

page object model design pattern

for every screen in the application, you create a page class for this screen and
keep all the locators (object repository) in it. to maintain the code reusability
and management

in page class, we use @find by annotation to locate the elements
we call them object repository

to initialize all the elements, we use constructor because contructor has been called
automatically when the object has been created.

in constructor, we call page factory and init elements

to utilize all page classes, we implement page initializer class
we are calling this class in common methods class so that it can be called
everywhere.
--------------------------------------------------------------------------------------------
CLASS - 4
            HRMSBatch19 - is a Framework we are writing
-------------------------------
Recap:
       Background:
               - in every feature file, if steps are common in scenarios and the flow is not broken,
                 then we keep all these common steps in background.
               - background is applicable only for one feature file. It means, for every feature file, background is different.

       hooks:
              - hooks class contains, pre condition and post condition for the entire project
              - hooks class will be a part of steps package
       we can pass data from feature file in scenario itself through parameters

       data driven testing:
                       - we can pass data from scenario outline with examples table
                       - in examples table, we pass username and password as an example
                       - based on the total number of data sets, my scenario will be executed
                       - if I have 3 data sets, my scenario will execute 3 times.

       Page object model design pattern:
                              - it allows us to create separate page classes for separate screens
                              - in this page class, we keep all the locators(object repositories)
                              - to use these elements, we initialize them using constructor

                              - we create the objects of these page classes using page initializer class
                              - we are extending this page initializer class in common methods so that all the objects
                              - can be called in the beginning of the execution
  ----------------------------------------------------------------------------- Class - 4 ALL STEPS
          Case Study from start to finish
          Login feature -

          valid login test -
              Given user is navigated to HRMS application
              When user enters valid username and password
              And user clicks on login button
              Then user is successfully logged in

          invalid login test
              Given user is navigated to HRMS application
              When user enters invalid username and password
              And user clicks on login button
              Then user should get error message on screen


          invalid username and valid password
          valid username and invalid password
          valid username and blank password
          blank username and valid password



          Forgotten account
              Given user is navigated to HRMS application
              When user clicks on fogotton account link
              Then user should be navigated to forgot account page

          Signup for FB
              Given user is navigated to HRMS application
              When user clicks on signup for facebook page
              Then user should be navigated to signup page

          We will create feature file with the name - Login.feature

          in this file, I will write all the scenarios

          create maven project -
          look for test folder
          create resources
          create features
          create login.feature
          write all the scenarios

          you need to create step definition -
          to keep all step def's, create steps package
          under steps package, LoginSteps class

          for generating the step def, we need runner class
          create runner package, inside this create runner class

          inside runner class - you mention all the cucumber options

          you keep step definitions in steps class

          now you have to write the code.
          you need common methods to call.
          write common methods and mention all the methods you need in scripting

          create config.properties file, create config directory, it will be under resources
          create config reader class, create utils package
          create constants class to keep all the paths

          coming back to write the code in steps classes,
          we need locators, common methods.

          we need page classes, create pages package
          implement Page object model design pattern

          to run these things, we need Hooks class for pre-condition and post condition
          you keep it under steps package

          -----------------------------------------------------------------------------------Class-4 New Topic

          Data Table:
                      - Data Table is implement only for one step
                      - hooks will execute 1 time
                      - doesn't matter how many data sets you send here, it will execute your pre-condition and post-condition

         WE HAVE TO KEEP ALL DATA IN EXCEL FILES:
                                          - Create ExcelReader in "utils"
          .xlsx - XSSFWorkBook
          .xls - HSSFWorkBook

          to validate specific field or string value we need assertions

          in Cucumber we use JUnit assertions

          Assertions:
                    - assertTrue - if something needs to be validated which exist or not
                    - assertEquals - if we need to compare 2 values i.e expected and actual

----------------------------------------------------------------------------------------------------
          Class 5 -
------------------------------------------------------------
          RECAP:

          data table - when we need to add multiple data sets in single execution, unlike
          examples table - we implement data table.

          difference "examples table" VS "data table"

          in examples table - hooks execute based on data sets
                              background executes based on data sets

          in data table - hooks execute one time
                          background executes 1 time


          for data management and maintain confidentiality of data,
          excel file - we pass data from excel file

          list of maps:
                    -  for each loop, to get one map at one point of time
                       based on keys, we fetch values from excel file via excel reader class

          Assertions:
                 JUnit:

                 Assert.assertTrue
                 Assert.assertEquals

          all types of report you generate in framework will be a part of target folder

          pretty keyword - it is used to print all the steps in console

          in cucumber, when you take screenshot, it accepts screenshot in array of byte
          byte[]

          Scenario class in cucumber - it holds the complete information of execution done
          which test case executed
          which test case passed
          which test case failed
          what steps passed
          what steps failed
----------------------------- Generating REPORTS, Taking screenshots of REPORT in Runner Class, STEPS:

             1. {"pretty"} - keyword in cucumber prints all steps in console which we execute
             2. "html:target/cucumber.html","json:target/cucumber.json" - to generate the report, we need to mention
             3. type of report - "html", and location - target/cucumber.json
             4. run the runner class, then in target directory "cucumber.json" report will automatically be created.
             5. To open the report -> right click -> open in -> browser -> Chrome (or other b)
                  We need to take the screenshot of the report:
               6. In CommonMethods create a screenshot method
               7. Write a path to this folder in Constants : public static final String SCREENSHOT_FILEPATH = System.getProperty("user.dir")+ "/screenshots/";
               8. In Hooks, add screenshot method @AfterMethod so it will split passed and failed reports in different folders

----------------------------- Create different RunnerClass for different types of test execution
Example: @smoke - SmokeRunner
         @regression - RegressionRunner
         @failed - FailedRunner   - ONLY for our own use, add to my FRAMEWORK

----------------------------- Create a build to be able to call all RunnerClasses from  pom.xml

 TO RUN the build from pom.xml, go to M - maven , project name (HRMSBatch19) --> Lifecycle --> test
 Expect:
          [INFO] BUILD SUCCESS
                 or
          [INFO] BUILD FAILED







